(()=>{"use strict";class s{constructor(s){this.shipLength=s,this.hits=0,this.sunk=!1,this.coordinates={coord1:[1,3],coord2:[1,9]}}hit(){return this.hits+=1}isSunk(){if(this.shipLength===this.hits)return this.sunk=!0,this.sunk}}class t{constructor(){this.carrier=new s(6),this.battleship=new s(4),this.cruiser=new s(3),this.submarine=new s(3),this.destroyer=new s(2),this.testBoat=new s(6),this.misses=[],this.sunkCount=0}allShipsSunk(){if(5===this.sunkCount)return"You lose"}receiveAttack(s){[this.carrier,this.battleship,this.cruiser,this.submarine,this.destroyer,this.testBoat].forEach((t=>{const i=t.coordinates.coord1,r=t.coordinates.coord2;if(i[0]===r[0]&&s[0]===i[0]){if(s[1]>=i[1]&&s[1]<=r[1])return t.hit(),t.isSunk(),t.sunk&&(this.sunkCount+=1,this.allShipsSunk()),null}else if(i[1]===r[1]&&s[1]===i[1]&&s[0]>=i[0]&&s[0]<=r[0])return t.hit(),t.isSunk(),t.sunk&&(this.sunkCount+=1,this.allShipsSunk()),null})),this.misses.push(s)}}class i{constructor(s){this.playerBoard=new t,this.playerName=s,this.yourTurn=!1}startTurn(){this.yourTurn&&this.giveAttack()}playerBegin(){if("Computer"!==this.playerName)return this.yourTurn=!0,this.giveAttack()}giveAttack(s=[1,2]){return this.yourTurn=!1,s}}const r=new i("Brooks"),e=new class extends i{constructor(s){super(s),this.playerName="Computer"}randomAttack(){this.yourTurn=!1,Math.floor(10*Math.random())}};console.log(r),console.log(e)})();