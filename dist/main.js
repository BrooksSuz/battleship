(()=>{"use strict";class t{constructor(t){this.shipLength=t,this.hits=0,this.sunk=!1,this.coordinates={coord1:[1,3],coord2:[1,9]}}hit(){return this.hits+=1}isSunk(){if(this.shipLength===this.hits)return this.sunk=!0,this.sunk}}class s{constructor(){this.carrier=new t(6),this.battleship=new t(4),this.cruiser=new t(3),this.submarine=new t(3),this.destroyer=new t(2),this.testBoat=new t(6),this.arrShip=[this.carrier,this.battleship,this.cruiser,this.submarine,this.destroyer,this.testBoat],this.misses=[],this.sunkCount=0}allShipsSunk(){return 5===this.sunkCount}receiveAttack(t){this.arrShip.forEach((s=>{const r=s.coordinates.coord1,e=s.coordinates.coord2;if(r[0]===e[0]&&t[0]===r[0]){if(t[1]>=r[1]&&t[1]<=e[1])return s.hit(),s.isSunk(),s.sunk&&(this.sunkCount+=1,this.allShipsSunk()),null}else if(r[1]===e[1]&&t[1]===r[1]&&t[0]>=r[0]&&t[0]<=e[0])return s.hit(),s.isSunk(),s.sunk&&(this.sunkCount+=1,this.allShipsSunk()),null})),this.misses.push(t)}}class r{constructor(t){this.playerBoard=new s,this.playerName=t}}class e extends r{constructor(t){super(t),this.yourTurn=!0}giveAttack(t){return t}}class i extends r{constructor(t="Computer"){super(t),this.yourTurn=!1}randomAttack(){const t=this.playerBoard.misses,s=()=>Math.floor(10*Math.random());let r=s(),e=s();if(0===t.length)return[r,e];for(let i=0;i<t.length;i++)t[i][0]===r&&t[i][1]===e&&(r=s(),e=s(),i--);return[r,e]}}(()=>{const t=new e(prompt("What's your name?")),s=new i;let r,n=!1;for(;!n;)if(t.yourTurn){if(r=t.giveAttack(JSON.parse(prompt("Enter Attack Coordinates"))),console.log("You hit a ship!"),s.playerBoard.receiveAttack(r),t.playerBoard.allShipsSunk())return n=!0,console.log("You've sunk all their ships!"),n;t.yourTurn=!1,s.yourTurn=!0}else if(s.yourTurn){if(r=s.randomAttack(),t.playerBoard.receiveAttack(r),s.playerBoard.allShipsSunk())return n=!0,console.log("All of your ships have been sunk!"),n;s.yourTurn=!1,t.yourTurn=!0}})()})();